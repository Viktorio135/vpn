import json
import os
import httpx
import uuid

from dotenv import load_dotenv
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    FSInputFile,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pydantic import BaseModel
from aiosend import CryptoPay, TESTNET
from aiosend.types import Invoice

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL = os.getenv('API_BASE_URL')
BOT_TOKEN = os.getenv('TOKEN')
CRYPTO_BOT_TOKEN = os.getenv('CRYPTO_BOT_TOKEN')

bot = Bot(token=BOT_TOKEN)
pay = CryptoPay(CRYPTO_BOT_TOKEN, TESTNET)
dp = Dispatcher()


class ConfigInfo(BaseModel):
    id: int
    config_name: str
    created_at: str
    expires_at: str


async def api_request(method: str, endpoint: str, data: dict = None):
    async with httpx.AsyncClient(base_url=API_BASE_URL) as client:
        try:
            response = await client.request(method, endpoint, json=data)
            response.raise_for_status()
            return response.json(), response.status_code
        except httpx.HTTPStatusError as e:
            print(f"API error: {e}")
            return None


async def create_new_conf(data: dict):
    async with httpx.AsyncClient(base_url=API_BASE_URL) as client:
        try:
            response = await client.request(
                "POST", "/get_available_server/", json=data
            )
            response.raise_for_status()
            return response.content, response.status_code
        except httpx.HTTPStatusError as e:
            print(f"API error: {e}")
            return None


async def get_conf_data(config_id: int, data: dict = None):
    async with httpx.AsyncClient(base_url=API_BASE_URL) as client:
        try:
            response = await client.request("POST", f"/config/{config_id}/")
            response.raise_for_status()
            return response
        except httpx.HTTPStatusError as e:
            print(f"API error: {e}")
            return None


@dp.message(Command("start"))
async def start_handler(msg: Message):
    user_id = msg.from_user.id
    user, status_code = await api_request(
            "GET",
            f"/user/{user_id}/",
        )
    if user["status_code"] == 200:
        await msg.answer(
            "–í—ã –ø–æ–ø–∞–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=main_menu()
        )
    else:
        await api_request("POST", "/create_user/", {"user_id": user_id})

        # –°–æ–∑–¥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            await create_new_conf(
                data={
                    "user_id": user_id,
                    "config_name": "default",
                    "months": 0  # –î–ª—è 5 –¥–Ω–µ–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤ –±—ç–∫–µ–Ω–¥
                }
            )
        except Exception as e:
            print(f"Error creating config: {e}")

        await msg.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 5 –¥–Ω–µ–π.",
            reply_markup=main_menu()
        )


def main_menu():
    buttons = [
        [KeyboardButton(text="üìÅ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")],
        [KeyboardButton(text="üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏/–ø—Ä–æ–¥–ª–∏—Ç—å")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


@dp.message(F.text == 'üìÅ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
async def show_configs(message: types.Message):
    user_id = message.from_user.id
    configs, status_code = await api_request(
        "GET", f"/user/{user_id}/configs/"
    )

    if not configs:
        await bot.send_message(
            message.from_user.id,
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.",
            reply_markup=main_menu()
        )
        return

    builder = InlineKeyboardBuilder()
    for config in configs:
        builder.add(InlineKeyboardButton(
            text=config['config_name'],
            callback_data=f"config_{config['id']}"
        ))
    builder.adjust(1)

    await bot.send_message(
        message.from_user.id,
        "–í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data.startswith("config_"))
async def config_detail(callback: types.CallbackQuery, bot: Bot):
    config_id = int(callback.data.split("_")[1])
    file_content = await get_conf_data(config_id)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = json.loads(file_content.headers['x-data'])

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    file_content = file_content.content

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
    file_name = f"{callback.from_user.id}_{headers['config_name']}.conf"
    with open(file_name, "wb") as file:
        if isinstance(file_content, str):
            file.write(file_content.encode())
        else:
            file.write(file_content)  # –ï—Å–ª–∏ —ç—Ç–æ –±–∞–π—Ç—ã, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    created_at_data_obj = datetime.fromisoformat(headers['created_at'])
    expires_at_data_obj = datetime.fromisoformat(headers['expires_at'])

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {headers['config_name']}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_at_data_obj.strftime('%d.%m.%Y %H:%M:%S')}\n"
        f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires_at_data_obj.strftime('%d.%m.%Y %H:%M:%S')}"
    )

    # –ö–Ω–æ–ø–∫–∏
    buttons = [
        [types.InlineKeyboardButton(
            text="–ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"renew_{config_id}"
        )],
        [types.InlineKeyboardButton(
            text="–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"reinstall_{config_id}"
        )],
    ]

    # –°–æ–∑–¥–∞–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    file = FSInputFile(file_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_document(
        chat_id=callback.message.chat.id,
        document=file,
        caption=text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
    )

    os.remove(file_name)


@dp.callback_query(F.data.startswith("renew_"))
async def renew_config(callback: types.CallbackQuery):
    config_id = int(callback.data.split("_")[1])
    # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


@dp.callback_query(F.data == "buy_renew")
async def buy_renew_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    configs, status_code = await api_request(
        "GET", f"/user/{user_id}/configs/"
    )

    builder = InlineKeyboardBuilder()
    for config in configs:
        builder.add(InlineKeyboardButton(
            text=f"–ü—Ä–æ–¥–ª–∏—Ç—å {config['config_name']}",
            callback_data=f"renew_{config['id']}"
        ))
    builder.add(InlineKeyboardButton(
        text="–ö—É–ø–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
        callback_data="buy_new"
    ))
    builder.adjust(1)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data == "help")
async def show_help(callback: types.CallbackQuery):
    help_text = (
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ WireGuard:\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç WireGuard\n"
        "2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª\n"
        "3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
        "4. –ì–æ—Ç–æ–≤–æ! –í–∞—à —Ç—Ä–∞—Ñ–∏–∫ –∑–∞—â–∏—â–µ–Ω üîí"
    )
    await callback.message.edit_text(
        help_text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥", callback_data="back_to_main"
            )]]
        )
    )


@pay.invoice_polling()
async def handle_payment(invoice: Invoice, message: types.Message, data: list):
    if invoice.status == "paid":
        config_name = str(uuid.uuid4())
        file, status_code = await create_new_conf(data={
            "user_id": data["user_id"],
            "config_name": config_name,
            "months": data["days"]
        })
        if int(status_code) == 200:
            file_name = f"{data['user_id']}_{config_name}.conf"
            with open(file_name, "wb") as f:
                f.write(file)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            file = FSInputFile(file_name)
            await message.answer_document(
                document=file,
                caption="‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
            )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(file_name)
        else:
            await bot.send_message(
                message.from_user.id,
                '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫('
            )


@dp.message(F.text == 'üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏/–ø—Ä–æ–¥–ª–∏—Ç—å')
async def show_payment_options(message: types.Message):
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫
    subscriptions = [
        ("1 –º–µ—Å—è—Ü - 1.5 USDT", 30),
        ("3 –º–µ—Å—è—Ü–∞ - 2.5 USDT", 90),
        ("6 –º–µ—Å—è—Ü–µ–≤ - 4 USDT", 180)
    ]

    for name, days in subscriptions:
        builder.add(InlineKeyboardButton(
            text=name,
            callback_data=f"subscribe_{days}"
        ))

    builder.adjust(1)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data.startswith("subscribe_"))
async def process_payment(callback: types.CallbackQuery):
    days = int(callback.data.split("_")[1])
    amount = {
        30: 15,
        90: 25,
        180: 40
    }.get(days, 5)

    invoice = await pay.create_invoice(
        amount, "USDT"
    )
    invoice.poll(message=callback.message, data={
        'user_id': callback.from_user.id,
        'days': days
    })

    await callback.message.answer(
        f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ {amount} USDT —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞:\n"
        f"<a href='{invoice.bot_invoice_url}'>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã</a>\n\n",
        parse_mode="HTML"
    )


# @dp.callback_query(F.data.startswith("confirm_payment_"))
# async def confirm_payment(callback: types.CallbackQuery):
#     days = int(callback.data.split("_")[2])
#     user_id = callback.from_user.id

#     # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ API –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞
#     # –í—Ä–µ–º–µ–Ω–Ω–æ —ç–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É

#     result = await api_request("POST", "/get_available_server/", {
#         "user_id": user_id,
#         "config_name": str(uuid.uuid4()),
#         "months": days
#     })

#     if result[1] == 200:
#         await callback.message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
#         await show_configs(callback.message)
#     else:
#         await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help_main(message: types.Message):
    help_text = (
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ WireGuard:\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç WireGuard\n"
        "2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª\n"
        "3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
        "4. –ì–æ—Ç–æ–≤–æ! –í–∞—à —Ç—Ä–∞—Ñ–∏–∫ –∑–∞—â–∏—â–µ–Ω üîí"
    )
    await bot.send_message(
        message.from_user.id,
        help_text,
    )


async def main():
    await asyncio.gather(
        dp.start_polling(bot),
        pay.start_polling()
    )

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
