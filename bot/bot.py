import json
import os
import time
import httpx
import uuid
import re
import logging

from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    FSInputFile,
    KeyboardButton,
    ReplyKeyboardMarkup,
    LabeledPrice,
    PreCheckoutQuery
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from pydantic import BaseModel
from aiosend import CryptoPay, TESTNET
from aiosend.types import Invoice
from tronpy.providers import HTTPProvider


from utils.api import (
    api_request,
    create_new_conf,
    renew_conf,
    reinstall_conf,
    create_transaction,
    update_transaction_status
)
from utils.register import register
from states import PaymentState, RenewState
from notifications import start_rabbit_consumer
from services.config import send_config


load_dotenv('/Users/viktorshpakovskij/Step/vpn/.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL = os.environ.get('API_BASE_URL')
BOT_TOKEN = os.environ.get('TOKEN')
CRYPTO_BOT_TOKEN = os.environ.get('CRYPTO_BOT_TOKEN')


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


bot = Bot(token=BOT_TOKEN)
pay = CryptoPay(CRYPTO_BOT_TOKEN, TESTNET)
dp = Dispatcher()


TRONGRID_API_KEY = os.getenv('TRONGRID_API_KEY')
TRON_PROVIDER = HTTPProvider(api_key=TRONGRID_API_KEY)
TRON_NETWORK = os.getenv('TRON_NETWORK', 'nile')
USDT_CONTRACT_ADDRESS = os.getenv('USDT_CONTRACT_ADDRESS')
DEPOSIT_ADDRESS = os.getenv('DEPOSIT_ADDRESS')


class ConfigInfo(BaseModel):
    id: int
    config_name: str
    created_at: str
    expires_at: str


@dp.message(Command("start"))
async def start_handler(msg: Message):
    user_id = msg.from_user.id
    user, status_code = await api_request(
            "GET",
            f"/user/{user_id}/",
        )
    if status_code == 200:
        welcome_text = (
            "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN —Å–µ—Ä–≤–∏—Å!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É "
            "–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )
        await msg.answer(
            welcome_text,
            reply_markup=main_menu()
        )
    else:
        await api_request("POST", "/user/create_user/", {"user_id": user_id})

        # –°–æ–∑–¥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            await create_new_conf(
                data={
                    "user_id": user_id,
                    "config_name": "default",
                    "months": 0  # –î–ª—è 5 –¥–Ω–µ–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤ –±—ç–∫–µ–Ω–¥
                }
            )
        except Exception as e:
            print(f"Error creating config: {e}")
        welcome_text = (
                "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 5 –¥–Ω–µ–π!\n\n"
                "–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.\n\n"
                "–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
            )
        await msg.answer(
            welcome_text,
            reply_markup=main_menu()
        )


def main_menu():
    buttons = [
        [KeyboardButton(text="üìÅ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")],
        [KeyboardButton(text="üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


@dp.message(F.text == 'üìÅ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
async def show_configs(message: types.Message):
    user_id = message.from_user.id
    configs, status_code = await api_request(
        "GET", f"/user/{user_id}/configs/"
    )

    if not configs:
        text = (
            "üîç –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ VPN', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."
        )
        await bot.send_message(
            message.from_user.id,
            text,
            reply_markup=main_menu()
        )
        return

    builder = InlineKeyboardBuilder()
    for config in configs:
        builder.add(InlineKeyboardButton(
            text=config['config_name'],
            callback_data=f"config_{config['id']}"
        ))
    builder.adjust(1)
    text = (
        "üìÇ –í–∞—à–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )
    await bot.send_message(
        message.from_user.id,
        text,
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data.startswith("config_"))
async def config_detail(callback: types.CallbackQuery, bot: Bot):
    config_id = int(callback.data.split("_")[1])
    await send_config(callback, bot, config_id)


@dp.callback_query(F.data.startswith("reinstall_"))
async def reinstall_config(callback: types.CallbackQuery):
    config_id = int(callback.data.split("_")[1])
    try:
        new_config, status_code = await reinstall_conf(config_id)
        if status_code == 200:
            await callback.message.answer(
                "üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!",
            )
            print(new_config)
            await send_config(callback, bot, new_config['config_id'])
        else:
            await callback.message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_id}: {e}")
        await callback.message.answer(
            "‚õîÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º."
        )


@dp.callback_query(lambda c: c.data.startswith("renew_") and c.data.split("_")[1].isdigit())
async def renew_config(callback: types.CallbackQuery, state: FSMContext):
    config_id = int(callback.data.split("_")[1])
    await state.update_data(config_id=config_id)
    builder = InlineKeyboardBuilder()
    periods = [
        ("üåü –ë–∞–∑–æ–≤—ã–π: 1 –º–µ—Å—è—Ü - 1.5 USDT", 1),
        ("üöÄ –°—Ç–∞–Ω–¥–∞—Ä—Ç: 3 –º–µ—Å—è—Ü–∞ - 2.5 USDT", 3),
        ("üî• –ü—Ä–µ–º–∏—É–º: 6 –º–µ—Å—è—Ü–µ–≤ - 4 USDT", 6)
    ]
    for name, months in periods:
        builder.add(InlineKeyboardButton(
            text=name,
            callback_data=f"renewperiod_{months}"
        ))
    builder.adjust(1)
    text = (
        "‚è≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        "–ß–µ–º –¥–æ–ª—å—à–µ —Å—Ä–æ–∫ - —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ —Ü–µ–Ω–∞!"
    )
    await callback.message.answer(
        text,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await state.set_state(RenewState.CHOOSE_PERIOD)


@dp.callback_query(RenewState.CHOOSE_PERIOD, F.data.startswith("renewperiod_"))
async def renew_choose_method(callback: types.CallbackQuery, state: FSMContext):
    months = int(callback.data.split("_")[1])
    amount = {
        1: 1.5,
        3: 2.5,
        6: 4.0
    }.get(months, 1.5)
    await state.update_data(months=months, amount=amount)
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="CryptoBot", callback_data="renewmethod_crypto")
    ).row(
        InlineKeyboardButton(text="TRC20 (0% –∫–æ–º–∏—Å—Å–∏–π)", callback_data="renewmethod_tron")
    ).row(
        InlineKeyboardButton(text="–ó–≤–µ–∑–¥—ã Telegram", callback_data="renewmethod_stars")
    )
    await callback.message.answer(
        "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:</b>",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await state.set_state(RenewState.CHOOSE_METHOD)


# @dp.callback_query(RenewState.CHOOSE_METHOD, F.data.startswith("renewmethod_"))
# async def renew_payment_method(callback: types.CallbackQuery, state: FSMContext):
#     method = callback.data.split("_")[1]
#     data = await state.get_data()
#     if method == "crypto":
#         invoice = await pay.create_invoice(data['amount'], "USDT")
#         invoice.poll(message=callback.message, data={
#             'user_id': callback.from_user.id,
#             'config_id': data['config_id'],
#             'months': data['months'],
#             'renew': True
#         })
#         await callback.message.answer(
#             f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ {data['amount']} USDT:\n"
#             f"<a href='{invoice.bot_invoice_url}'>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã</a>",
#             parse_mode="HTML"
#         )
#         await state.clear()
#     elif method == "tron":
#         await callback.message.answer(
#             "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à TRC20-–∞–¥—Ä–µ—Å USDT –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:"
#         )
#         await state.set_state(RenewState.AWAITING_WALLET)


@dp.callback_query(RenewState.CHOOSE_METHOD, F.data.startswith("renewmethod_"))
async def renew_payment_method(callback: types.CallbackQuery, state: FSMContext):
    method = callback.data.split("_")[1]
    data = await state.get_data()
    if method == "crypto":
        transaction = await create_transaction(
            data={
                "user_id": callback.from_user.id,
                "amount": data['amount'],
                "currency": "USDT",
                "payment_method": "crypto",
                "type": "renewal"
            }
        )
        invoice = await pay.create_invoice(data['amount'], "USDT")
        invoice.poll(message=callback.message, data={
            'user_id': callback.from_user.id,
            'config_id': data['config_id'],
            'months': data['months'],
            'transaction_id': transaction[0]['id'],
            'renew': True
        })
        await callback.message.answer(
            f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ {data['amount']} USDT:\n"
            f"<a href='{invoice.bot_invoice_url}'>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã</a>",
            parse_mode="HTML"
        )
        await state.clear()
    elif method == "tron":
        transaction = await create_transaction(
            data={
                "user_id": callback.from_user.id,
                "amount": data['amount'],
                "currency": "TRX",
                "payment_method": "tron",
                "type": "renewal"
            }
        )
        await state.update_data(transaction_id=transaction[0]['id'])
        text = (
            "üì• <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ TRC20 (USDT)</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à TRC20-–∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:"
        )
        await callback.message.answer(
            text,
            parse_mode="HTML"
        )
        await state.set_state(RenewState.AWAITING_WALLET)
    elif method == "stars":  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        stars_price = {
            1: 75,
            3: 110,
            6: 200
        }
        months = data['months']
        price = [LabeledPrice(label="XTR", amount=stars_price[months])]
        builder = InlineKeyboardBuilder()
        builder.button(text=f'–û–ø–ª–∞—Ç–∏—Ç—å {stars_price[months]} –∑–≤–µ–∑–¥', pay=True)
        transaction = await create_transaction(
            data={
                "user_id": callback.from_user.id,
                "amount": data['amount'],
                "currency": "XTR",
                "payment_method": "stars",
                "type": "renewal"
            }
        )
        await callback.message.answer_invoice(
            title="–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –ø–æ–¥–ø–∏—Å–∫–∏",
            description=f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤",
            prices=price,
            provider_token="",
            currency="XTR",
            reply_markup=builder.as_markup(),
            payload=json.dumps({
                "user_id": callback.from_user.id,
                "months": months,
                "transaction_id": transaction[0]['id'],
                "config_id": data['config_id'],
                "renew": True
            })
        )
        await state.clear()


@dp.message(RenewState.AWAITING_WALLET)
async def renew_tron_wallet(message: Message, state: FSMContext):
    if not re.match(r'^T[1-9A-HJ-NP-Za-km-z]{33}$', message.text):
        text = (
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞!</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TRC20-–∞–¥—Ä–µ—Å:"
        )
        await message.answer(text)
        return
    await state.update_data(wallet=message.text)
    await state.update_data(start_time=int(time.time() * 1000))
    data = await state.get_data()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª", callback_data="renew_check_tron")]
    ])
    await message.answer(
        f"üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>{data['amount']} USDT</b> –Ω–∞ –∞–¥—Ä–µ—Å:\n"
        f"<code>{DEPOSIT_ADDRESS}</code>\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(RenewState.AWAITING_PAYMENT)

@dp.callback_query(RenewState.AWAITING_PAYMENT, F.data.in_(["renew_check_tron", "renew_recheck_tron"]))
async def renew_check_tron_payment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.edit_reply_markup()
    try:
        result = await check_tron_transaction(
            sender=data['wallet'],
            amount=data['amount'],
            min_timestamp=data['start_time']
        )
        if result['status'] == 'success':
            renew_result, status_code = await renew_conf(
                config_id=data['config_id'],
                months=data['months']
            )
            if status_code == 200:
                await update_transaction_status(
                    data={
                        "transaction_id": int(data.get('transaction_id')),
                        "status": "success",
                        "external_tx_id": str(result['tx_hash']),
                        "comment": f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {data['config_id']} –Ω–∞ {data['months']} –º–µ—Å—è—Ü–µ–≤"
                    }
                )
                text = (
                    f"‚úÖ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>\n\n"
                    f"–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>{result['tx_hash']}</code>\n"
                    f"–°—É–º–º–∞: {result['amount']} USDT"
                )
                await callback.message.answer(text, parse_mode="HTML")
            else:
                
                await update_transaction_status(
                    data={
                        "transaction_id": int(data.get('transaction_id')),
                        "status": "failed",
                        "comment": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                    }
                )
                await callback.message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è.</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", parse_mode="HTML")
        elif result['status'] == 'not_found':
            retry_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="renew_recheck_tron")]
            ])
            text = (
                "‚ö†Ô∏è <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.</b>\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "1. –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ USDT –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å\n"
                "2. –°—É–º–º–∞ –∏ —Å–µ—Ç—å TRC20 –≤–µ—Ä–Ω—ã\n"
                "3. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ —Å–µ—Ç–∏\n\n"
                "–ü—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ."
            )
            await callback.message.answer(
                text,
                parse_mode="HTML",
                reply_markup=retry_kb
            )
        else:
            text = f"üö® <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n{result['message']}"
            await callback.message.answer(text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        text = (
            "‚õîÔ∏è <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã.</b>\n"
            "–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback.message.answer(text, parse_mode="HTML")


@dp.callback_query(F.data == "buy_renew")
async def buy_renew_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    configs, status_code = await api_request(
        "GET", f"/user/{user_id}/configs/"
    )

    builder = InlineKeyboardBuilder()
    for config in configs:
        builder.add(InlineKeyboardButton(
            text=f"–ü—Ä–æ–¥–ª–∏—Ç—å {config['config_name']}",
            callback_data=f"renew_{config['id']}"
        ))
    builder.add(InlineKeyboardButton(
        text="–ö—É–ø–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
        callback_data="buy_new"
    ))
    builder.adjust(1)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data == "help")
async def show_help(callback: types.CallbackQuery):
    help_text = (
        "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN</b>\n\n"
        "1. <b>–°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç WireGuard</b>\n"
        "   –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è: Windows, macOS, iOS, Android, Linux\n\n"
        "2. <b>–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª</b>\n"
        "   - –û—Ç–∫—Ä–æ–π—Ç–µ WireGuard\n"
        "   - –ù–∞–∂–º–∏—Ç–µ '+' ‚Üí '–ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞'\n"
        "   - –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª .conf\n\n"
        "3. <b>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</b>\n"
        "   - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∫–ª—é—á–∏—Ç—å' –Ω–∞–ø—Ä–æ—Ç–∏–≤ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n"
        "4. <b>–ì–æ—Ç–æ–≤–æ! –í–∞—à —Ç—Ä–∞—Ñ–∏–∫ –∑–∞—â–∏—â–µ–Ω</b> üîí\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )
    await callback.message.edit_text(
        help_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥", callback_data="back_to_main"
            )]]
        )
    )


@pay.invoice_polling()
async def handle_payment(invoice: Invoice, message: types.Message, data: dict):
    if invoice.status == "paid":
        if data.get('renew'):
            # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            renew_result, status_code = await renew_conf(
                config_id=data['config_id'],
                months=data['months']
            )
            if status_code == 200:
                await update_transaction_status(
                    data={
                        "transaction_id": int(data.get('transaction_id')),
                        "status": "success",
                        "external_tx_id": str(invoice.invoice_id),
                        "comment": f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {data['config_id']}"
                    }
                )
                await message.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!")
            else:
                await update_transaction_status(
                    data={
                        "transaction_id": data.get('transaction_id'),
                        "status": "failed",
                        "external_tx_id": str(invoice.invoice_id),
                        "comment": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                    }
                )
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        else:
            # –ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_name = str(uuid.uuid4())
            file, status_code = await create_new_conf(data={
                "user_id": data["user_id"],
                "config_name": config_name,
                "months": data["days"]
            })
            if int(status_code) == 200:
                await update_transaction_status(
                    data={
                        "transaction_id": int(data.get('transaction_id')),
                        "status": "success",
                        "external_tx_id": str(invoice.invoice_id),
                        "comment": f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {data['user_id']}"
                    }
                )
                file_name = f"{data['user_id']}_{config_name}.conf"
                with open(file_name, "wb") as f:
                    f.write(file)
                file = FSInputFile(file_name)
                await message.answer_document(
                    document=file,
                    caption="‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
                )
                os.remove(file_name)
            else:
                await update_transaction_status(
                    data={
                        "transaction_id": data.get('transaction_id'),
                        "status": "failed",
                        "external_tx_id": str(invoice.invoice_id),
                        "comment": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                    }
                )
                await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫(')



@dp.message(F.text == 'üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏')
async def show_payment_options(message: types.Message):
    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫
    subscriptions = [
        ("üåü –ë–∞–∑–æ–≤—ã–π: 1 –º–µ—Å—è—Ü - 1.5 USDT", 1),
        ("üöÄ –°—Ç–∞–Ω–¥–∞—Ä—Ç: 3 –º–µ—Å—è—Ü–∞ - 2.5 USDT", 3),
        ("üî• –ü—Ä–µ–º–∏—É–º: 6 –º–µ—Å—è—Ü–µ–≤ - 4 USDT", 6)
    ]

    for name, days in subscriptions:
        builder.add(InlineKeyboardButton(
            text=name,
            callback_data=f"subscribe_{days}"
        ))

    builder.adjust(1)
    text = (
        "üöÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω VPN:</b>\n\n"
        "–í—Å–µ –ø–ª–∞–Ω—ã –≤–∫–ª—é—á–∞—é—Ç:\n"
        "‚úì –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫\n"
        "‚úì –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
        "‚úì –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7"
    )
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data.startswith("subscribe_"))
async def process_payment(callback: types.CallbackQuery, state: FSMContext):
    days = int(callback.data.split("_")[1])
    amount = {
        1: 1.5,
        3: 2.5,
        6: 4.0
    }.get(days, 0.5)

    await state.update_data(days=days, amount=amount)

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="CryptoBot", callback_data="method_crypto")
    ).row(
        InlineKeyboardButton(text="TRC20 (0% –∫–æ–º–∏—Å—Å–∏–π)", callback_data="method_tron")
    ).row(
        InlineKeyboardButton(text="–ó–≤–µ–∑–¥—ã Telegram", callback_data="method_stars")
    )

    await callback.message.answer(
        "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await state.set_state(PaymentState.CHOOSE_METHOD)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(PaymentState.CHOOSE_METHOD, F.data.startswith("method_"))
async def handle_payment_method(callback: types.CallbackQuery, state: FSMContext):
    method = callback.data.split("_")[1]
    data = await state.get_data()

    if method == "crypto":
        transaction = await create_transaction(
            data={
                "user_id": callback.from_user.id,
                "amount": data['amount'],
                "currency": "USDT",
                "payment_method": "crypto",
                "type": "purchase"
            }
        )
        invoice = await pay.create_invoice(data['amount'], "USDT")
        invoice.poll(message=callback.message, data={
            'user_id': callback.from_user.id,
            'days': data['days'],
            'transaction_id': transaction[0]['id'],
        })
        await state.update_data(transaction_id=transaction[0]['id'])
        text = (
            f"üí∏ <b>–û–ø–ª–∞—Ç–∏—Ç–µ {data['amount']} USDT</b>\n\n"
            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
            f"<a href='{invoice.bot_invoice_url}'>–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot</a>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
        await callback.message.answer(
            text,
            parse_mode="HTML"
        )
        await state.clear()

    elif method == "tron":
        transaction = await create_transaction(
            data={
                "user_id": callback.from_user.id,
                "amount": data['amount'],
                "currency": "TRX",
                "payment_method": "tron",
                "type": "purchase"
            }
        )
        await state.update_data(transaction_id=transaction[0]['id'])
        text = (
            "üì• <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ TRC20 (USDT)</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à TRC20-–∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:"
        )
        await callback.message.answer(
            text,
            parse_mode="HTML"
        )
        await state.set_state(PaymentState.AWAITING_WALLET)

    elif method == "stars":
        stars_price = {
            1: 75,
            3: 110,
            6: 200
        }
        months = data['days']
        price = [LabeledPrice(label="XTR", amount=stars_price[months])]
        # price = [LabeledPrice(label="XTR", amount=1)]
        builder = InlineKeyboardBuilder()
        builder.button(text=f'–û–ø–ª–∞—Ç–∏—Ç—å {stars_price[months]} –∑–≤–µ–∑–¥', pay=True)
        transaction = await create_transaction(
            data={
                "user_id": callback.from_user.id,
                "amount": stars_price[months],
                "currency": "XTR",
                "payment_method": "stars",
                "type": "purchase"
            }
        )
        await callback.message.answer_invoice(
            title="–û–ø–ª–∞—Ç–∞ VPN –ø–æ–¥–ø–∏—Å–∫–∏",
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN —Å—Ä–æ–∫–æ–º –Ω–∞ {months} –¥–Ω–µ–π",
            prices=price,
            provider_token="",
            currency="XTR",
            reply_markup=builder.as_markup(),
            payload=json.dumps({
                "user_id": callback.from_user.id,
                "months": months,
                "transaction_id": transaction[0]['id'],
            })
        )
        await state.clear()


@dp.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@dp.message(F.successful_payment)
async def success_payment_handler(message: Message):
    payload = json.loads(message.successful_payment.invoice_payload)
    if payload.get('renew'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        renew_result, status_code = await renew_conf(
            config_id=payload['config_id'],
            months=payload['months']
        )
        if status_code == 200:
            await update_transaction_status(
                data={
                    "transaction_id": payload["transaction_id"],
                    "status": "success",
                    "external_tx_id": message.successful_payment.provider_payment_charge_id,
                    "comment": f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {payload['config_id']}"
                }
            )
            await message.answer(
                "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∞.</b>",
                parse_mode="HTML"
            )
        else:
            await update_transaction_status(
                data={
                    "transaction_id": payload["transaction_id"],
                    "status": "failed",
                    "external_tx_id": message.successful_payment.provider_payment_charge_id,
                    "comment": "–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                }
            )
            text = (
                "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            await message.answer(text, parse_mode="HTML")
    else:
        config_name = str(uuid.uuid4())
        file, status_code = await create_new_conf(data={
            "user_id": payload["user_id"],
            "config_name": config_name,
            "months": payload["months"]
        })
        if int(status_code) == 200:
            await update_transaction_status(
                data={
                    "transaction_id": payload["transaction_id"],
                    "status": "success",
                    "external_tx_id": message.successful_payment.provider_payment_charge_id,
                    "comment": f"–û–ø–ª–∞—Ç–∞ –∑–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {config_name}"
                }
            )
            file_name = f"{payload['user_id']}_{config_name}.conf"
            with open(file_name, "wb") as f:
                f.write(file)
            file = FSInputFile(file_name)
            caption = (
                "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                "–í–∞—à–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:"
            )
            await message.answer_document(
                document=file,
                caption=caption,
                parse_mode="HTML"
            )
            os.remove(file_name)
        else:
            await update_transaction_status(
                data={
                    "transaction_id": payload["transaction_id"],
                    "status": "failed",
                    "external_tx_id": message.successful_payment.provider_payment_charge_id,
                    "comment": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                }
            )
            text = (
                "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            await message.answer(text, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ TRC20 –∞–¥—Ä–µ—Å–∞
@dp.message(PaymentState.AWAITING_WALLET)
async def process_tron_wallet(message: Message, state: FSMContext):
    if not re.match(r'^T[1-9A-HJ-NP-Za-km-z]{33}$', message.text):
        text = (
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞!</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TRC20-–∞–¥—Ä–µ—Å:"
        )
        await message.answer(text, parse_mode="HTML")
        return

    await state.update_data(wallet=message.text)
    await state.update_data(start_time=int(time.time() * 1000))
    data = await state.get_data()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª", callback_data="check_tron")]
    ])

    await message.answer(
        f"üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>{data['amount']} USDT</b> –Ω–∞ –∞–¥—Ä–µ—Å:\n"
        f"<code>{DEPOSIT_ADDRESS}</code>\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(PaymentState.AWAITING_PAYMENT)


async def check_tron_transaction(sender: str, amount: float, min_timestamp: int) -> dict:
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"https://nile.trongrid.io/v1/accounts/{DEPOSIT_ADDRESS}/transactions/trc20",
                params={
                    "limit": 50,
                    "contract_address": USDT_CONTRACT_ADDRESS,
                    "only_confirmed": "true",
                    "order_by": "block_timestamp,desc"
                },
                headers={"TRON-PRO-API-KEY": TRONGRID_API_KEY}
            )

            transactions = response.json().get('data', [])
            for tx in transactions:
                if (
                    tx['from'] == sender and
                    tx['to'] == DEPOSIT_ADDRESS and
                    float(tx['value']) / 1_000_000 >= amount - 0.1 and
                    tx['block_timestamp'] >= min_timestamp
                ):
                    return {
                        'status': 'success',
                        'tx_hash': tx['transaction_id'],
                        'amount': float(tx['value']) / 1_000_000
                    }

            return {'status': 'not_found'}

    except Exception as e:
        print(f"TRON API error: {e}")
        return {'status': 'error', 'message': str(e)}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
@dp.callback_query(PaymentState.AWAITING_PAYMENT, F.data.in_(["check_tron", "recheck_tron"]))
async def check_tron_payment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.edit_reply_markup()

    try:
        result = await check_tron_transaction(
            sender=data['wallet'],
            amount=data['amount'],
            min_timestamp=data['start_time']
        )

        if result['status'] == 'success':
            if abs(result['amount'] - data['amount']) > 0.1:
                text = (
                    "‚ö†Ô∏è <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–ª–∞—Ç–µ–∂, –Ω–æ —Å—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!</b>\n\n"
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result['amount']} USDT\n"
                    f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {data['amount']} USDT\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                await callback.message.answer(text, parse_mode="HTML")
                return

            config_name = str(uuid.uuid4())

            file_content, status_code = await create_new_conf({
                "user_id": callback.from_user.id,
                "config_name": config_name,
                "months": data['days']
            })

            if status_code == 200:
                await update_transaction_status(
                    data={
                        "transaction_id": data['transaction_id'],
                        "status": "success",
                        "external_tx_id": result['tx_hash'],
                        "comment": f"–û–ø–ª–∞—Ç–∞ –∑–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {config_name}"
                    }
                )
                file_name = f"{callback.from_user.id}.conf"
                with open(file_name, "wb") as f:
                    f.write(file_content)
                caption = (
                    "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                    f"–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>{result['tx_hash']}</code>\n"
                    f"–°—É–º–º–∞: {result['amount']} USDT\n\n"
                    "–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
                )
                await callback.message.answer_document(
                    FSInputFile(file_name),
                    caption=caption,
                    parse_mode="HTML"
                )
                os.remove(file_name)
            else:
                await update_transaction_status(
                    data={
                        "transaction_id": data['transaction_id'],
                        "status": "failed",
                        "external_tx_id": result['tx_hash'],
                        "comment": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                    }
                )
                text = (
                    "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.</b>\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                await callback.message.answer(text, parse_mode="HTML")
        elif result['status'] == 'not_found':
            text = (
                "‚ö†Ô∏è <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.</b>\n\n"

                "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –æ–∫–æ–ª–æ 2 –º–∏–Ω—É—Ç\n\n"

                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "1. –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ USDT –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å\n"
                "2. –°—É–º–º–∞ –∏ —Å–µ—Ç—å TRC20 –≤–µ—Ä–Ω—ã\n"
                "3. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ —Å–µ—Ç–∏\n\n"
                "–ü—Ä–æ–≤–µ—Ä–∫—É –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ."
            )
            retry_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="recheck_tron")]
            ])
            await callback.message.answer(text, parse_mode="HTML", reply_markup=retry_kb)

            # # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            # retry_kb = InlineKeyboardMarkup(inline_keyboard=[
            #     [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="recheck_tron")]
            # ])
            # await callback.message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∑–∂–µ?", reply_markup=retry_kb)
        else:
            await callback.message.answer(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {result['message']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        text = (
            "‚õîÔ∏è <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã.</b>\n"
            "–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback.message.answer(text, parse_mode="HTML")


@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help_main(message: types.Message):
    help_text = (
        "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN</b>\n\n"
        "1. <b>–°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç WireGuard</b>\n"
        "   –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è: Windows, macOS, iOS, Android, Linux\n\n"
        "2. <b>–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª</b>\n"
        "   - –û—Ç–∫—Ä–æ–π—Ç–µ WireGuard\n"
        "   - –ù–∞–∂–º–∏—Ç–µ '+' ‚Üí '–ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞'\n"
        "   - –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª .conf\n\n"
        "3. <b>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</b>\n"
        "   - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–∫–ª—é—á–∏—Ç—å' –Ω–∞–ø—Ä–æ—Ç–∏–≤ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n\n"
        "4. <b>–ì–æ—Ç–æ–≤–æ! –í–∞—à —Ç—Ä–∞—Ñ–∏–∫ –∑–∞—â–∏—â–µ–Ω</b> üîí\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )
    await bot.send_message(
        message.from_user.id,
        help_text,
        parse_mode="HTML"
    )


async def main():
    await asyncio.gather(
        dp.start_polling(bot),
        pay.start_polling(),
        start_rabbit_consumer()
    )

if __name__ == "__main__":
    if register():
        import asyncio
        asyncio.run(main())
    else:
        logger.error('invalid registration')
        exit()
